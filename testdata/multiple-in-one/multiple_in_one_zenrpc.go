// Code generated by zenrpc; DO NOT EDIT.

package multiple_in_one

import (
	"context"
	"encoding/json"

	"github.com/semrush/zenrpc"
	"github.com/semrush/zenrpc/smd"
)

var RPC = struct {
	API struct{ MethodA, MethodB string }
}{
	API: struct{ MethodA, MethodB string }{
		MethodA: "service_a.method_a",
		MethodB: "service_b.method_b",
	},
}

func (API) SMD() smd.ServiceInfo {
	return smd.ServiceInfo{
		Description: ``,
		Methods: map[string]smd.Service{
			"MethodA": {
				Description: ``,
				Parameters:  []smd.JSONSchema{},
			},
			"MethodB": {
				Description: ``,
				Parameters:  []smd.JSONSchema{},
				Returns: smd.JSONSchema{
					Description: ``,
					Optional:    false,
					Type:        smd.String,
				},
			},
		},
	}
}

// Invoke is as generated code from zenrpc cmd
func (s API) Invoke(ctx context.Context, method string, params json.RawMessage) zenrpc.Response {
	resp := zenrpc.Response{}

	switch method {
	case RPC.API.MethodA:
		resp.Set(s.MethodA())

	case RPC.API.MethodB:
		resp.Set(s.MethodB())

	default:
		resp = zenrpc.NewResponseError(nil, zenrpc.MethodNotFound, "", nil)
	}

	return resp
}
